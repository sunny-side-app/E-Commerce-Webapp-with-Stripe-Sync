name: CI - Automated Tests

on:
  push:
    branches:
      - develop
      - test-cicd-workflow
  pull_request:
    branches:
      - develop
      - test-cicd-workflow

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Create required directories
      run: |
        mkdir -p src/logs/critical
        mkdir -p src/logs/error
        mkdir -p src/logs/warning
        mkdir -p src/logs/info
        mkdir -p src/logs/debug
        sudo chown -R $USER:$USER src/logs
        chmod -R 777 src/logs

    - name: Check log directory permissions
      run: |
        ls -ld src/logs
        ls -lR src/logs

    - name: Check current user
      run: whoami

    - name: Create .env file
      run: |
        echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
        echo "LOGGING_DIR=src/logs" >> .env
        echo "CI=true" >> .env
        cp .env src/.env
        cp .env mysql-variables.env

    - name: Build and start services
      run: docker-compose up -d
    
    - name: Check MySQL logs
      run: docker-compose logs db

    - name: Check MySQL readiness
      run: |
        echo "Checking if MySQL is ready for connections..."
        while ! docker-compose exec -T db mysqladmin ping -h"db" --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 5
        done
        echo "MySQL is ready!"

    - name: Set up Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Reload .env file
      run: |
        if [ -f .env ]; then
          echo "Reloading .env file..."
          while IFS= read -r line; do
            if [[ "$line" != \#* && "$line" != "" ]]; then
              export "$line"
              echo "$line" >> $GITHUB_ENV
            fi
          done < .env
        else
          echo ".env file not found."
          exit 1
        fi

        echo "MYSQL_APP_USER: $MYSQL_APP_USER"
        echo "MYSQL_APP_USER_PASSWORD: $MYSQL_APP_USER_PASSWORD"
        
        # Verify MySQL connection
        echo "Testing MySQL connection with user $MYSQL_APP_USER..."
        docker-compose exec -T db sh -c "mysql -u$MYSQL_APP_USER -p$MYSQL_APP_USER_PASSWORD -e 'SELECT 1;'"
    
    - name: Debug environment variables # 共有されている環境変数を確認
      run: |
        echo "MYSQL_APP_USER: $MYSQL_APP_USER"
        echo "MYSQL_APP_USER_PASSWORD: $MYSQL_APP_USER_PASSWORD"

    - name: Verify Docker network connectivity # ネットワーク確認ステップ
      run: |
        echo "Testing if 'db' is reachable from 'web' container..."
        docker-compose exec -T web sh -c "getent hosts db || echo 'Failed to resolve db'"

    # - name: Check Django logging settings
    #   run: |
    #     cd src
    #     . ../venv/bin/activate
    #     python manage.py shell -c "from django.conf import settings; print(settings.LOGGING)"
    #     python manage.py shell -c "import os; print(os.getenv('LOGGING_DIR'))"

    - name: Verify MySQL connection
      run: |
        # Verify MySQL connection
        echo "Testing MySQL connection with user $MYSQL_APP_USER..."
        docker-compose exec -T db sh -c "mysql -u$MYSQL_APP_USER -p$MYSQL_APP_USER_PASSWORD -e 'SELECT 1;'"

    - name: Verify Django DB connection
      run: |
        cd src
        . ../venv/bin/activate

        # .envファイルを仮想環境内で再読み込み
        if [ -f ../.env ]; then
          echo "Reloading .env file for Django DB connection inside virtual environment..."
          while IFS='=' read -r key value; do
            # 空行やコメントを無視
            if [[ ! $key =~ ^# ]] && [[ $key != "" ]]; then
              export "$key=$value"
            fi
          done < ../.env
        else
          echo ".env file not found."
          exit 1
        fi
        
        
        # python <<EOF
        # from django.db import connection
        # try:
        #     connection.ensure_connection()
        #     print("Database connection successful!")
        # except Exception as e:
        #     print("Database connection failed: {}".format(e))
        # EOF

        export DJANGO_SETTINGS_MODULE=djangopj.settings

        python <<EOF
        from django.db import connection
        try:
            with connection.cursor() as cursor:
                cursor.execute("CREATE DATABASE test_clothes_shop_db;")
                print("Test database created successfully!")
        except Exception as e:
            print(f"Failed to create test database: {e}")
        EOF

    - name: Run Django tests
      run: |
        cd src
        . ../venv/bin/activate

        # .envファイルを仮想環境内で再読み込み
        if [ -f ../.env ]; then
          echo "Reloading .env file for Django DB connection inside virtual environment..."
          while IFS='=' read -r key value; do
            # 空行やコメントを無視
            if [[ ! $key =~ ^# ]] && [[ $key != "" ]]; then
              export "$key=$value"
            fi
          done < ../.env
        else
          echo ".env file not found."
          exit 1
        fi

        # Dockerネットワークの確認
        echo "Verifying Docker network connectivity..."
        docker-compose exec -T web sh -c "getent hosts db || echo 'Failed to resolve db'"

        # MySQLが起動するまで待機
        echo "Waiting for MySQL to be ready..."
        until docker-compose exec -T db sh -c "mysqladmin ping -h'$MYSQL_HOST' --silent"; do
          echo "Waiting for MySQL..."
          sleep 5
        done
        echo "MySQL is ready!"

        echo "MYSQL_HOST: $MYSQL_HOST"
        echo "MYSQL_PORT: $MYSQL_PORT"
        echo "MYSQL_APP_USER: $MYSQL_APP_USER"
        echo "MYSQL_APP_USER_PASSWORD: $MYSQL_APP_USER_PASSWORD"
        echo "MYSQL_DB_NAME: $MYSQL_DB_NAME"
        echo "MYSQL_TEST_DB_NAME: $MYSQL_TEST_DB_NAME"
        echo "DATABASE_ENGINE: $DATABASE_ENGINE"
        echo "EMAIL_HOST: $EMAIL_HOST"
        echo "EMAIL_HOST_USER: $EMAIL_HOST_USER"

        export DJANGO_SETTINGS_MODULE=djangopj.settings

        # DjangoのDATABASES設定を確認
        python manage.py shell -c "from django.conf import settings; print(settings.DATABASES)"

        python manage.py test
