name: CI - Automated Tests

on:
  push:
    branches:
      - develop
      - test-cicd-workflow
  pull_request:
    branches:
      - develop
      - test-cicd-workflow

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Create required directories
      run: |
        mkdir -p src/logs/critical
        mkdir -p src/logs/error
        mkdir -p src/logs/warning
        mkdir -p src/logs/info
        mkdir -p src/logs/debug
        sudo chown -R $USER:$USER src/logs
        chmod -R 777 src/logs

    # - name: Create mysql-variables.env file
    #   run: |
    #     echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > mysql-variables.env
    #     echo "MYSQL_APP_USER=${{ secrets.MYSQL_APP_USER }}" >> mysql-variables.env
    #     echo "MYSQL_APP_USER_PASSWORD=${{ secrets.MYSQL_APP_USER_PASSWORD }}" >> mysql-variables.env
    
    # - name: Create .env file
    #   run: |
    #     echo "LOGGING_DIR=src/logs" > .env
    #     echo "CI=true" >> .env
    #     echo "MYSQL_HOST=db" >> .env
    #     echo "MYSQL_PORT=3306" >> .env
    #     echo "MYSQL_DB_NAME=${{ secrets.MYSQL_DB_NAME }}" >> .env
    #     echo "MYSQL_TEST_DB_NAME=${{ secrets.MYSQL_TEST_DB_NAME }}" >> .env
    #     echo "MYSQL_APP_USER=${{ secrets.MYSQL_APP_USER }}" >> .env
    #     echo "MYSQL_APP_USER_PASSWORD=${{ secrets.MYSQL_APP_USER_PASSWORD }}" >> .env
    - name: Create .env file
      run: |
        echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
        echo "LOGGING_DIR=src/logs" >> .env
        echo "CI=true" >> .env
        cp .env mysql-variables.env

    - name: Build and start services
      run: docker-compose up -d
    
    - name: Check MySQL logs
      run: docker-compose logs db

    - name: Check MySQL readiness
      run: |
        echo "Checking if MySQL is ready for connections..."
        while ! docker-compose exec -T db mysqladmin ping -h"db" --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 5
        done
        echo "MySQL is ready!"

    - name: Set up Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Grant MySQL privileges for app_user
      run: |
        docker-compose exec -T db sh -c "
          MYSQL_PWD='${{ secrets.MYSQL_ROOT_PASSWORD }}' mysql -u root -e '
          DROP USER IF EXISTS '\''${{ secrets.MYSQL_APP_USER }}'\''@'\''%'\''; 
          CREATE USER '\''${{ secrets.MYSQL_APP_USER }}'\''@'\''%'\'' IDENTIFIED BY '\''${{ secrets.MYSQL_APP_USER_PASSWORD }}'\''; 
          GRANT ALL PRIVILEGES ON *.* TO '\''${{ secrets.MYSQL_APP_USER }}'\''@'\''%'\''; 
          FLUSH PRIVILEGES;'
        "

    - name: Run Django tests inside Docker
      run: |
        source .env &&
        docker-compose exec -T -e MYSQL_PWD='${{ secrets.MYSQL_APP_USER_PASSWORD }}' web bash -c "
          source /django/venv/bin/activate && python3 manage.py test
        "
